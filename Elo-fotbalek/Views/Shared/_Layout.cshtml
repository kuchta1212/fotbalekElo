@model BaseModel
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>

    <link rel="stylesheet" href="~/css/site.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" asp-controller="Home" asp-action="Index">Elo @Model.AppConfiguration.AppName</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item active">
                    <a class="nav-link" asp-controller="Home" asp-action="AddMatch">Přidej zápas <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item active">
                    <a class="nav-link" asp-controller="Home" asp-action="AddPlayer">Přidej hráče</a>
                </li>
                <li class="nav-item active">
                    <a class="nav-link" asp-controller="Home" asp-action="GenerateTeams">Doporuč sestavy</a>
                </li>
                <li class="nav-item active">
                    <a class="nav-link" asp-controller="Doodle" asp-action="Index">Doodle</a>
                </li>
            </ul>
        </div>
        
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                </li>
            </ul>
            <partial name="_LoginPartial" />
        </div>
    </nav>

    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; 2020 - jku</p>
        </footer>
    </div>

    <script src="https://code.jquery.com/jquery-3.2.1.min.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>


    @RenderSection("Scripts", required: false)
</body>
</html>

<script type="text/javascript">
    $(function() {
        var success = function(data) {
            if (!data) {
                document.getElementById('LogOut').style.visibility = "hidden";
                document.getElementById('LogIn').style.visibility = "visible";
            } else {
                document.getElementById('LogOut').style.visibility = "visible";
                document.getElementById('LogIn').style.visibility = "hidden";
            }

        };
        var error = function(error) {
            console.log(error);
        };
        $.ajax({
            url: "Admin/IsLogedIn",
            type: "GET",
            success: success,
            error: error
        });

    });

    function playerSelected(select) {
        var id = select.getAttribute('id');
        var substitudeId = 'substituted-' + id.split('-')[1];
        var substitudeLabelId = 'substituted-label-' + id.split('-')[1];
        document.getElementById(substitudeId).style.visibility = "hidden";
        document.getElementById(substitudeLabelId).style.visibility = "hidden";
        if (select.selectedOptions[0].text === "Náhradník") {

            document.getElementById(substitudeId).style.visibility = "visible";
            document.getElementById(substitudeLabelId).style.visibility = "visible";
        }
    }

    google.charts.load('current', { 'packages': ['corechart', 'line'] });
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
        var data = new google.visualization.DataTable();
        data.addColumn('date', 'X');
        data.addColumn('number', 'Elo');

        data.addRows(elos);

        var options = {

        };

        var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));

        chart.draw(data, options);
    }

    function onDoodleClick(item){
        const id = item.getAttribute("id").split('_')[0];
        const src = item.getAttribute("src");
        const value = item.getAttribute("value");

        let currentValue;
        const tableCell = document.getElementById(id+"_td");

        const isSmall = item.getAttribute("src").includes("_small");
        switch(value) {
            case "Accept":
                item.setAttribute("src", isSmall ? "images/icons/maybe_small.png" : "images/icons/maybe.png");
                item.setAttribute("value", "Maybe");
                if (tableCell.classList.value.includes("accept")){
                    tableCell.classList.remove("accept");
                }
                tableCell.classList.add("maybe");
                currentValue = "Maybe";
                break;
            case "Maybe":
                item.setAttribute("src", isSmall ? "images/icons/refused_small.png" : "images/icons/refused.png");
                item.setAttribute("value", "Refused");
                if (tableCell.classList.value.includes("maybe")){
                    tableCell.classList.remove("maybe");
                }
                tableCell.classList.add("refused");
                currentValue = "Refused";
                break;
            case "Refused":
                item.setAttribute("src", isSmall ? "images/icons/accept_small.png" : "images/icons/accept.png");
                item.setAttribute("value", "Accept");
                if (tableCell.classList.value.includes("refused")){
                    tableCell.classList.remove("refused");
                }
                tableCell.classList.add("accept");
                currentValue = "Accept";
                break;
            case "NoAnswer":
                item.setAttribute("src", isSmall ? "images/icons/accept_small.png" :"images/icons/accept.png");
                item.setAttribute("value", "Accept");
                tableCell.classList.add("accept");
                currentValue = "Accept";
                break;
        }

        const buttonDiv = document.getElementById(id);
        const originalValue = buttonDiv.getAttribute("data-id");
        if(buttonDiv.style.display == 'block' && originalValue == currentValue) {
            buttonDiv.style.display = 'none';
        } else {
            buttonDiv.style.display = 'block';
        }
    }

    function onDoodleVoteButtonClick(item){
        const fullId = item.getAttribute("id").split('_')[0];
        const name = fullId.split('-')[0];
        const date = fullId.split('-')[3];

        const imgElement = document.getElementById(fullId + '_img');
        const value = imgElement.getAttribute("value");

        const originalValue = document.getElementById(fullId).getAttribute("data-id");

        document.body.style.cursor = 'progress'
        $.post('@Url.Action("Vote","Doodle")',{name:name, date: date, value: value }).then((result) => {
            document.body.style.cursor = 'default'
            const buttonDiv = document.getElementById(fullId);
            buttonDiv.setAttribute("data-id", value);
            buttonDiv.style.display = 'none';

            switch(value) {
            case "Accept":
                const acceptHeader = document.getElementById("coming-header");
                const aAalue = parseInt(acceptHeader.innerText);
                acceptHeader.innerText = aAalue +1;
                subtractFrom(originalValue);
                break;
            case "Maybe":
                const maybeHeader = document.getElementById("maybe-header");
                const mValue = parseInt(maybeHeader.innerText);
                maybeHeader.innerText = mValue +1;
                subtractFrom(originalValue);
                break;
            case "Refused":
                const refusedHeader = document.getElementById("refused-header");
                const rValue = parseInt(refusedHeader.innerText);
                refusedHeader.innerText = rValue +1;
                subtractFrom(originalValue);
                break;
            }
        }, 
        error => {
            alert("Kapacita naplněna")
        });
    }

    function subtractFrom(originalValue) {
        switch(originalValue) {
            case "Accept":
                const acceptHeader = document.getElementById("coming-header");
                const aAalue = parseInt(acceptHeader.innerText);
                acceptHeader.innerText = aAalue -1;
                break;
            case "Maybe":
                const maybeHeader = document.getElementById("maybe-header");
                const mValue = parseInt(maybeHeader.innerText);
                maybeHeader.innerText = mValue -1;
                break;
            case "Refused":
                const refusedHeader = document.getElementById("refused-header");
                const rValue = parseInt(refusedHeader.innerText);
                refusedHeader.innerText = rValue -1;
                break;
        }
    }
</script>